{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x9d3EF6A5D9ae42AA53A1EA2b60A81768D09B1E44",
    "txHash": "0xefd252db1135e56bee558dba6c922a1bf86844f46ac116b168b7a379eb8a5ed9"
  },
  "proxies": [
    {
      "address": "0xF9Eff21e512680d6009E5684334444478f847459",
      "txHash": "0x3d28d58f06ecb05986b34c08b092c762cd6bd186bea0565296cc3f02b609b712",
      "kind": "transparent"
    },
    {
      "address": "0xa3b67474A27Ba4bb28eE22e5f1C4529c07A45287",
      "txHash": "0xd746948e993127ee1b0163379b86a2d38efba84919e2d0c9c8789d68b073df52",
      "kind": "transparent"
    },
    {
      "address": "0xF52deFbC1A0b43395f55F3F23C8F22865a6cBF53",
      "txHash": "0xfa430adcdadd9694a4f77c368984bbcb2b72b20b165d9dc627b6ac912f141e8c",
      "kind": "transparent"
    }
  ],
  "impls": {
    "ebe844425f4487e0d9b455aa6a6ef944ee0739041dd584783cbe2e2d4476737b": {
      "address": "0x4A84ECFD55FdD6A05d6AF7a08e3854668EA4E657",
      "txHash": "0x4f461c1e496603496704a09fb9310002cf3bf023ba4fb77c712ad77a5d76a10c",
      "layout": {
        "solcVersion": "0.8.7",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:400"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "103",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:120"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_address,t_struct(Counter)3097_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "154",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "155",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "_delegates",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
          },
          {
            "label": "_checkpoints",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1547_storage)dyn_storage)",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
          },
          {
            "label": "_totalSupplyCheckpoints",
            "offset": 0,
            "slot": "206",
            "type": "t_array(t_struct(Checkpoint)1547_storage)dyn_storage",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:284"
          },
          {
            "label": "getSharesOf",
            "offset": 0,
            "slot": "254",
            "type": "t_function_internal_view(t_address)returns(t_uint256)",
            "contract": "AbstractRewards",
            "src": "contracts\\base\\AbstractRewards.sol:31"
          },
          {
            "label": "getTotalShares",
            "offset": 8,
            "slot": "254",
            "type": "t_function_internal_view()returns(t_uint256)",
            "contract": "AbstractRewards",
            "src": "contracts\\base\\AbstractRewards.sol:32"
          },
          {
            "label": "pointsPerShare",
            "offset": 0,
            "slot": "255",
            "type": "t_uint256",
            "contract": "AbstractRewards",
            "src": "contracts\\base\\AbstractRewards.sol:35"
          },
          {
            "label": "pointsCorrection",
            "offset": 0,
            "slot": "256",
            "type": "t_mapping(t_address,t_int256)",
            "contract": "AbstractRewards",
            "src": "contracts\\base\\AbstractRewards.sol:36"
          },
          {
            "label": "withdrawnRewards",
            "offset": 0,
            "slot": "257",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "AbstractRewards",
            "src": "contracts\\base\\AbstractRewards.sol:37"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "258",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "308",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "309",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)7141_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "359",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "drops",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_uint256,t_struct(Drop)9604_storage)",
            "contract": "MerkleDrop",
            "src": "contracts\\base\\MerkleDrop.sol:31"
          },
          {
            "label": "depositToken",
            "offset": 0,
            "slot": "409",
            "type": "t_contract(IERC20Upgradeable)1515",
            "contract": "BasePool",
            "src": "contracts\\base\\BasePool.sol:26"
          },
          {
            "label": "rewardToken",
            "offset": 0,
            "slot": "410",
            "type": "t_contract(IERC20Upgradeable)1515",
            "contract": "BasePool",
            "src": "contracts\\base\\BasePool.sol:27"
          },
          {
            "label": "escrowPool",
            "offset": 0,
            "slot": "411",
            "type": "t_contract(ITimeLockPool)9950",
            "contract": "BasePool",
            "src": "contracts\\base\\BasePool.sol:28"
          },
          {
            "label": "escrowPortion",
            "offset": 0,
            "slot": "412",
            "type": "t_uint256",
            "contract": "BasePool",
            "src": "contracts\\base\\BasePool.sol:29"
          },
          {
            "label": "escrowDuration",
            "offset": 0,
            "slot": "413",
            "type": "t_uint256",
            "contract": "BasePool",
            "src": "contracts\\base\\BasePool.sol:30"
          },
          {
            "label": "maxBonus",
            "offset": 0,
            "slot": "414",
            "type": "t_uint256",
            "contract": "TimeLockPool",
            "src": "contracts\\TimeLockPool.sol:23"
          },
          {
            "label": "maxLockDuration",
            "offset": 0,
            "slot": "415",
            "type": "t_uint256",
            "contract": "TimeLockPool",
            "src": "contracts\\TimeLockPool.sol:24"
          },
          {
            "label": "curve",
            "offset": 0,
            "slot": "416",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "TimeLockPool",
            "src": "contracts\\TimeLockPool.sol:27"
          },
          {
            "label": "unit",
            "offset": 0,
            "slot": "417",
            "type": "t_uint256",
            "contract": "TimeLockPool",
            "src": "contracts\\TimeLockPool.sol:28"
          },
          {
            "label": "depositsOf",
            "offset": 0,
            "slot": "418",
            "type": "t_mapping(t_address,t_array(t_struct(Deposit)7550_storage)dyn_storage)",
            "contract": "TimeLockPool",
            "src": "contracts\\TimeLockPool.sol:30"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(Checkpoint)1547_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(Deposit)7550_storage)dyn_storage": {
            "label": "struct TimeLockPool.Deposit[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Upgradeable)1515": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(ITimeLockPool)9950": {
            "label": "contract ITimeLockPool",
            "numberOfBytes": "20"
          },
          "t_function_internal_view()returns(t_uint256)": {
            "label": "function () view returns (uint256)",
            "numberOfBytes": "8"
          },
          "t_function_internal_view(t_address)returns(t_uint256)": {
            "label": "function (address) view returns (uint256)",
            "numberOfBytes": "8"
          },
          "t_int256": {
            "label": "int256",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)1547_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_array(t_struct(Deposit)7550_storage)dyn_storage)": {
            "label": "mapping(address => struct TimeLockPool.Deposit[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_int256)": {
            "label": "mapping(address => int256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)3097_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)7141_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Drop)9604_storage)": {
            "label": "mapping(uint256 => struct MerkleDrop.Drop)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)7141_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)6826_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Checkpoint)1547_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "votes",
                "type": "t_uint224",
                "offset": 4,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Counter)3097_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Deposit)7550_storage": {
            "label": "struct TimeLockPool.Deposit",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "shareAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "start",
                "type": "t_uint64",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "end",
                "type": "t_uint64",
                "offset": 8,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Drop)9604_storage": {
            "label": "struct MerkleDrop.Drop",
            "members": [
              {
                "label": "reserves",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "claims",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "merkleRoot",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)6826_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint224": {
            "label": "uint224",
            "numberOfBytes": "28"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
